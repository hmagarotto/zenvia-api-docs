openapi: 3.0.0
info:
  version: 1.0.0
  title: Zenvia API
  termsOfService: 'https://zenvia.com/'
  contact:
    email: contact@zenvia.com
    url: 'http://zenvia.com/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: /zenvia-logo-developers.png
  description: |
    This is an **example** API to demonstrate features of OpenAPI specification
    # Introduction
    This specification is intended to to be a good starting point for describing Zenvia API in 
    [OpenAPI format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).
x-tagGroups:
  - name: Chatbots
    tags:
      - Chatbots
      - Dispatches
  - name: Credentials
    tags:
      - Credentials
  - name: Messaging
    tags:
      - SMS
      - WhatsApp
      - Facebook
  - name: Reports
    tags:
      - Consumption
      - Engagement
servers:
  - url: 'http://api.zenvia.com/api/v1'
  - url: 'https://api.zenvia.com/api/v1'
security:
  - jwt: []
paths:
  /channels/facebook/messages:
    post:
      tags:
        - Facebook
      description: Send a Facebook message
      responses:
        '200':
          description: Facebook message model
  /channels/sms/messages:
    post:
      tags:
        - SMS
      description: Send a SMS message
      responses:
        '200':
          description: SMS message model
  /channels/whatsapp/messages:
    post:
      tags:
        - WhatsApp
      description: Send a WhatsApp message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBase'
      responses:
        '200':
          description: Whatsapp message model
      x-code-samples:
        - lang: curl
          source: |
            curl \
            -H"Content-Type: application/json" \
            -H"Authorization: Bearer ${JWT}" \
            "https://api.zenvia.com/api/v1/channels/whatsapp/messages" \
            -d'{
              "from": "991d2006-7770-11e9-8018-ef0cd0bfcf86",
              "to": "+5511999999999",
              "contents": []
            }'
  /chatbots:
    get:
      tags:
        - Chatbots
      description: List all chatbots
      responses:
        '200':
          description: Chatbot model
    post:
      tags:
        - Chatbots
      description: Create a new chatbot
      responses:
        '200':
          description: Chatbot model
  '/chatbots/{chatbotId}':
    get:
      tags:
        - Chatbots
      description: Get specific chatbot
      parameters:
        - name: chatbotId
          in: path
          required: true
          description: 'the chatbot identifier, as chatbotId'
          schema:
            type: string
      responses:
        '200':
          description: Chatbot model
  '/chatbots/{chatbotId}/dispatches':
    post:
      tags:
        - Dispatches
      description: Create a bulk or single dispatch
      parameters:
        - name: chatbotId
          in: path
          required: true
          description: 'the chatbot identifier, as chatbotId'
          schema:
            type: string
      responses:
        '200':
          description: Dispatch information model
components:
  schemas:
    Message:
      type: object
      allOf:
        - $ref: '#/components/schemas/MessageBase'
        - required:
            - messageId
          properties:
            messageId:
              readOnly: true
              title: Message ID
              type: string
              description: |
                An ID for this message. This can be used for futher message consulting or callback notifications.
      example:
        messageId: fca3f11c-7771-11e9-8897-efb56267dc4b
        from: 991d2006-7770-11e9-8018-ef0cd0bfcf86
        to: 5511999999999
        contents: []
    MessageBase:
      type: object
      required:
        - from
        - to
        - contents
      properties:
        from:
          title: Sender ID
          type: string
          description: |
            This is the identifier of sender of this message. The sender shoud be created with a credential.
        to:
          title: Recipient ID
          type: string
          description: |
            The recipient is the identifier of a contact in this channel.
        contents:
          title: Message Contents
          type: array
          description: |
            A list of content to be sent
          items:
            type: object
      example:
        from: 991d2006-7770-11e9-8018-ef0cd0bfcf86
        to: 5511999999999
        contents: null
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
