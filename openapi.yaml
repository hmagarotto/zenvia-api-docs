openapi: 3.0.0
info:
  version: 1.0.0
  title: Zenvia API
  termsOfService: 'https://zenvia.com/'
  contact:
    email: contact@zenvia.com
    url: 'http://zenvia.com/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://hmagarotto.github.io/zenvia-api-docs/zenvia-logo-developers.png'
  description: |
    # Overview
    This specification is intended to to be a good starting point for describing Zenvia API in [OpenAPI format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).
    # REST
    Our API follows the REST convention.

    With REST we expose an hierarchical entity models called resources that you can interact with using REST operations like create a new resource item, delete one resource item, list all resource items, etc...

    All our resources is represented using the JSON format and a content type of 'application/json'.
    ## Resources Tree
    ## HTTP Methods
    ## Pagination
    ## Error Handling
    ## Restrictions
    ### Rate Limit
    ## Deviations from REST
    # Authentication
    To use this API you need to send the JWT token in all requests.

    The JWT token needs to be sent in HTTP header 'Authorization' with a 'bearer token'.

    Example: ```Authorization: Bearer eyJhbGciOiJSUzI1NiJ9..```
x-tagGroups:
  - name: Chatbots
    tags:
      - Chatbots
      - Dispatches
  - name: Credentials
    tags:
      - Credentials
  - name: Messaging
    tags:
      - SMS
      - WhatsApp
      - Facebook
  - name: Reports
    tags:
      - Consumption
      - Engagement
servers:
  - description: The production API server
    url: 'https://api.zenvia.com/api/v1'
security:
  - jwt: []
paths:
  /channels/facebook/messages:
    post:
      tags:
        - Facebook
      description: Send a Facebook message
      responses:
        '200':
          description: Facebook message model
  /channels/sms/messages:
    post:
      tags:
        - SMS
      description: Send a SMS message
      responses:
        '200':
          description: SMS message model
  /channels/whatsapp/messages:
    post:
      tags:
        - WhatsApp
      description: Send a WhatsApp message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WhatsApp-Sent-Message'
      responses:
        '200':
          description: Created message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WhatsApp-Sent-Message'
      x-code-samples:
        - lang: curl
          source: |
            curl \
            -H"Content-Type: application/json" \
            -H"Authorization: Bearer ${JWT}" \
            "https://api.zenvia.com/api/v1/channels/whatsapp/messages" \
            -d'{
              "from": "991d2006-7770-11e9-8018-ef0cd0bfcf86",
              "to": "+5511999999999",
              "contents": []
            }'
  /chatbots:
    get:
      tags:
        - Chatbots
      description: List all chatbots
      responses:
        '200':
          description: Chatbot model
    post:
      tags:
        - Chatbots
      description: Create a new chatbot
      responses:
        '200':
          description: Chatbot model
  '/chatbots/{chatbotId}':
    get:
      tags:
        - Chatbots
      description: Get specific chatbot
      parameters:
        - name: chatbotId
          in: path
          required: true
          description: 'the chatbot identifier, as chatbotId'
          schema:
            type: string
      responses:
        '200':
          description: Chatbot model
  '/chatbots/{chatbotId}/dispatches':
    post:
      tags:
        - Dispatches
      description: Create a bulk or single dispatch
      parameters:
        - name: chatbotId
          in: path
          required: true
          description: 'the chatbot identifier, as chatbotId'
          schema:
            type: string
      responses:
        '200':
          description: Dispatch information model
components:
  schemas:
    Content-File:
      type: object
      allOf:
        - $ref: '#/components/schemas/Content'
        - type: object
          required:
            - fileUrl
            - fileMimeType
          properties:
            fileUrl:
              type: string
            fileMimeType:
              type: string
            fileCaption:
              type: string
    Content-QuickReply:
      type: object
      allOf:
        - $ref: '#/components/schemas/Content-Text'
        - type: object
          required:
            - buttons
          properties:
            buttons:
              type: array
              $ref: '#/components/schemas/Partials-Button'
    Content-Text:
      type: object
      allOf:
        - $ref: '#/components/schemas/Content'
        - type: object
          properties:
            text:
              title: Text to be sent
              type: string
          required:
            - text
    Content:
      type: object
      properties:
        type:
          title: Content Type
          type: string
      required:
        - type
    Partials-Button:
      type: object
      properties:
        type:
          title: Button type
          type: string
          enum:
            - postback
        text:
          title: Button text
          type: string
        payload:
          title: Postback payload
          type: string
    Content-WhatsApp-HSM:
      type: object
      allOf:
        - $ref: '#/components/schemas/Content'
        - type: object
          required:
            - template
            - params
          properties:
            template:
              title: The template data
              description: Selection of existent HSM template
              type: object
              required:
                - namespace
                - name
              properties:
                namespace:
                  description: The namespace that will be used
                  type: string
                name:
                  description: The name of template to use within the namespace
                  type: string
                locale:
                  description: Language locale of template. Default is pt_BR
                  type: string
            params:
              title: Template params
              description: Parameters that will be dynamically incorporated into the message
              type: object
              required:
                - data
                - order
              properties:
                data:
                  description: Object containing `name-value` parameters
                  type: object
                order:
                  description: Array with parameters name in the same order expected by the desired template
                  type: array
                  items:
                    type: string
    WhatsApp-Sent-Message-Content:
      oneOf:
        - $ref: '#/components/schemas/Content-Text'
        - $ref: '#/components/schemas/Content-File'
        - $ref: '#/components/schemas/Content-WhatsApp-HSM'
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/Content-Text'
          file: '#/components/schemas/Content-File'
          hsm: '#/components/schemas/Content-WhatsApp-HSM'
    Message:
      title: Message Object
      description: |
        This is a Message object model.
      type: object
      required:
        - messageId
        - from
        - to
        - contents
      properties:
        id:
          readOnly: true
          title: Message ID
          type: string
          description: |
            An ID for this message. This can be used for future message consulting or callback notifications.
        from:
          title: Sender ID
          type: string
          description: |
            This is the identifier of sender of this message. The sender shoud be created with a credential.
        to:
          title: Recipient ID
          type: string
          description: |
            The recipient is the identifier of a contact in this channel.
        contents:
          title: Message Contents
          type: array
          description: |
            A list of content to be sent
          items:
            type: object
    WhatsApp-Sent-Message:
      allOf:
        - $ref: '#/components/schemas/Message'
        - properties:
            contents:
              title: Message Contents
              type: array
              description: |
                A list of content to be sent
              items:
                $ref: '#/components/schemas/WhatsApp-Sent-Message-Content'
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
